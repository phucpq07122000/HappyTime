{"ast":null,"code":"import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { unstable_gridFocusColumnGroupHeaderSelector } from '../focus';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\nconst getLeftColumnIndex = _ref => {\n  let {\n    currentColIndex,\n    firstColIndex,\n    lastColIndex,\n    direction\n  } = _ref;\n  if (direction === 'rtl') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  }\n  return null;\n};\nconst getRightColumnIndex = _ref2 => {\n  let {\n    currentColIndex,\n    firstColIndex,\n    lastColIndex,\n    direction\n  } = _ref2;\n  if (direction === 'rtl') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  }\n  return null;\n};\n\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const theme = useTheme();\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n  const goToCell = React.useCallback(function (colIndex, rowId) {\n    let closestColumnToUse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left';\n    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return currentPageRows[rowIndex].id;\n  }, [currentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, theme.direction, goToCell, getRowIdFromIndex, goToHeader, goToGroupHeader]);\n  const focusedColumnGroup = useGridSelector(apiRef, unstable_gridFocusColumnGroupHeaderSelector);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    if (focusedColumnGroup === null) {\n      return;\n    }\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, focusedColumnGroup, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    // Get the most recent params because the cell mode may have changed by another listener\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {\n      return;\n    }\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (currentPageRows.length === 0 || !dimensions) {\n      return;\n    }\n    const direction = theme.direction;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'left' : 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'right' : 'left');\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, theme.direction, getRowIdFromIndex, goToCell, goToHeader]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, _ref3) => {\n    let {\n      event\n    } = _ref3;\n    if (event.key === ' ') {\n      // Space scrolls to the last row\n      return false;\n    }\n    return initialValue;\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'canStartEditing', checkIfCanStartEditing);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};","map":{"version":3,"names":["React","useTheme","gridVisibleColumnDefinitionsSelector","useGridLogger","useGridApiEventHandler","gridExpandedSortedRowEntriesSelector","useGridVisibleRows","GRID_CHECKBOX_SELECTION_COL_DEF","gridClasses","GridCellModes","isNavigationKey","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridPinnedRowsSelector","unstable_gridFocusColumnGroupHeaderSelector","gridColumnGroupsHeaderMaxDepthSelector","useGridSelector","useGridRegisterPipeProcessor","enrichPageRowsWithPinnedRows","apiRef","rows","pinnedRows","top","bottom","getLeftColumnIndex","_ref","currentColIndex","firstColIndex","lastColIndex","direction","getRightColumnIndex","_ref2","useGridKeyboardNavigation","props","logger","initialCurrentPageRows","theme","currentPageRows","useMemo","goToCell","useCallback","colIndex","rowId","closestColumnToUse","arguments","length","undefined","visibleSortedRows","nextCellColSpanInfo","current","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","rowIndexRelativeToAllRows","findIndex","row","id","debug","scrollToIndexes","rowIndex","field","getVisibleColumns","setCellFocus","goToHeader","event","setColumnHeaderFocus","goToGroupHeader","depth","setColumnGroupHeaderFocus","getRowIdFromIndex","handleColumnHeaderKeyDown","params","headerTitleNode","currentTarget","querySelector","columnHeaderTitleContainerContent","isFromInsideContent","contains","target","dimensions","getRootDimensions","viewportPageSize","getViewportPageSize","colIndexBefore","getColumnIndex","firstRowIndexInPage","lastRowIndexInPage","columnGroupMaxDepth","shouldPreventDefault","key","rightColIndex","leftColIndex","Math","min","ctrlKey","metaKey","toggleColumnMenu","preventDefault","focusedColumnGroup","handleColumnGroupHeaderKeyDown","currentField","currentDepth","fields","maxDepth","remainingRightColumns","indexOf","remainingLeftColumns","handleCellKeyDown","cellParams","getCellParams","cellMode","Edit","canUpdateFocus","unstable_applyPipeProcessors","cell","rowIndexBefore","shiftKey","colDef","type","nextRowIndex","max","checkIfCanStartEditing","initialValue","_ref3"],"sources":["C:/Users/Tran Ho/Desktop/happy_time/HappyTime/happytime/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js"],"sourcesContent":["import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { unstable_gridFocusColumnGroupHeaderSelector } from '../focus';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\nconst getLeftColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  direction\n}) => {\n  if (direction === 'rtl') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  }\n  return null;\n};\nconst getRightColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  direction\n}) => {\n  if (direction === 'rtl') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  }\n  return null;\n};\n\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const theme = useTheme();\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left') => {\n    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return currentPageRows[rowIndex].id;\n  }, [currentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, theme.direction, goToCell, getRowIdFromIndex, goToHeader, goToGroupHeader]);\n  const focusedColumnGroup = useGridSelector(apiRef, unstable_gridFocusColumnGroupHeaderSelector);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    if (focusedColumnGroup === null) {\n      return;\n    }\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, focusedColumnGroup, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    // Get the most recent params because the cell mode may have changed by another listener\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {\n      return;\n    }\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (currentPageRows.length === 0 || !dimensions) {\n      return;\n    }\n    const direction = theme.direction;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'left' : 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'right' : 'left');\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, theme.direction, getRowIdFromIndex, goToCell, goToHeader]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, {\n    event\n  }) => {\n    if (event.key === ' ') {\n      // Space scrolls to the last row\n      return false;\n    }\n    return initialValue;\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'canStartEditing', checkIfCanStartEditing);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}